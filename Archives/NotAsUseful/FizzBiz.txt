SOLUTION IN PYTHON
class Solution:
    def fizzBuzz(self, n: int) -> List[str]:
        i = 1
        answer=[]
        while i <= n:
            if i % 3 == 0 and i % 5 == 0:
                answer.append("FizzBuzz")
            elif i % 3 == 0 and i % 5 != 0:
                answer.append("Fizz")
            elif i % 3 != 0 and i % 5 == 0:
                answer.append("Buzz")
            else:
                answer.append(str(i))
            i += 1    
        return answer

        #Apparently while loops are a lot slower than for loops

SOLUTION IN C
/**
 * Note: The returned array must be malloced, assume caller calls free().
 * Also issues with strdup and sprintf worked out from trial and error.
 */

 #include <strings.h>
char ** fizzBuzz(int n, int* returnSize){
    

   *returnSize =n;
    char **answer = (char**)malloc(n * sizeof(char *));
    if(answer == NULL){
        printf("Error allocating memory!\n");
    }

    printf("n =%d, returnSize= %d",n, *returnSize);

    for(int j = 0; j < n; j++){
        answer[j]=(char*)malloc(9*sizeof(char));
        sprintf(answer[j], "d", j+1);
        if (answer[j] == NULL){
            printf("Error allocating memory!\n");
            return 1;
        } else if ((j+1) % 3 == 0 && (j+1) % 5 == 0){
            answer[j] = strdup( "FizzBuzz");
        } else if ((j+1) % 3 == 0 && (j+1) % 5 != 0){
            answer[j] = strdup( "Fizz");
        } else if ((j+1) % 3 != 0 && (j+1) % 5 == 0){   
            answer[j] = strdup( "Buzz");
        } else {
            //answer[j] = strdup(j+1);
            sprintf(answer[j], "%d", j+1);
        }  
    }
    return answer;

}

**Two elegant answers from others**
char ** fizzBuzz(int n, int* returnSize){
    char **a = calloc(1, sizeof(char *[n])), s[100], m3, m5;
    *returnSize = n;
    for (; m3 = !(n % 3), m5 = !(n % 5), n ; n--)
        if (!m3 && !m5)
            snprintf(s, sizeof s, "%d", n), a[n - 1] = strdup(s);
        else
            a[n - 1] = strdup(m3 && m5 ? "FizzBuzz" : m3 ? "Fizz" : "Buzz");
    return a;
}

char ** fizzBuzz(int n, int* returnSize){
    *returnSize = n;
    char **T = (char**)malloc(sizeof(char*)*n);
    for(int i=0;i<n;i++){
        T[i]=(char*)malloc(9*sizeof(char));
        sprintf(T[i], "%d", i+1);  // Convert 'i' to char 
        if( (i+1) % 3 == 0 && (i+1) % 5 == 0){T[i] = "FizzBuzz";}
        else if((i+1)%3 == 0){T[i]= "Fizz";}
        else if((i+1)%5 == 0){T[i] = "Buzz";}
    }  
    return T;
}
************


NOTES FROM ONLINE
C lets you use the subscript operator [] on arrays and on pointers. When you use this operator on a pointer, the resultant type is the type to which the pointer points to. For example, if you apply [] to int*, the result would be an int.

That is precisely what's going on: you are passing int*, which corresponds to a vector of integers. Using subscript on it once makes it int, so you cannot apply the second subscript to it.

It appears from your code that arr should be a 2-D array. If it is implemented as a "jagged" array (i.e. an array of pointers) then the parameter type should be int **.

Moreover, it appears that you are trying to return a local array. In order to do that legally, you need to allocate the array dynamically, and return a pointer. However, a better approach would be declaring a special struct for your 4x4 matrix, and using it to wrap your fixed-size array, like this: