class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        n = len(mat)
        a,b,j = 0,0,0
        m = n-1
        k = int(n/2)
        d = n%2
        print(b)
        print(int(k))
        if d != 0:
            for i in range(0,n):
                if j == k:
                    a = mat[i][j] + a
                else:
                    a = mat[i][j] + a
                    b = mat[i][m-j] + b
                j+=1
                print(a,b)
        else:       
            for i in range(0,n):
                if i == k:
                    a = mat[i][j] + a
                    b = mat[i][m-j] + b
                elif i == k+1:
                    a = mat[i][j] + a
                    b = mat[i][m-j] + b
                else:
                    a = mat[i][j] + a
                    b = mat[i][m-j] + b
                j+=1
                print(a,b)
        print(a,b)
        return a + b 

C solution:
int diagonalSum(int** mat, int matSize, int* matColSize){

    int prim = 0;
    int secd = 0;
    int sum = 0;
    int m = matSize - 1;
    int remainder = matSize % 2;
    int half = (matSize /2); 
    int k = 0;
    int total = 0;
    printf("matSize = %d , remainder = %d %d %d", matSize, remainder, m, half );

    if(matSize == 1){
        return mat[0][0];
    }

    if(remainder != 0){
        for(int i =0; i <= m;i++){
            if(i == half){
                prim += mat[i][k];
                printf("odd prim # %d", prim);

            } else {
                prim += mat[i][k];
                secd += mat[i][m-k];
                printf("odd # prim and secd %d %d", prim, secd);

            }
            k++;
        }
    } else {
        for(int j = 0; j <= m;j++){
            prim += mat[j][k];
            secd += mat[j][m-k];
            k++;
            printf("even # prim and secd %d %d", prim, secd);
        }
    }

    total = prim + secd;
    printf("Total %d", total);
    return total;

}   

Using if statements to cut out loops increases runtime speed.

RUST

impl Solution {
    pub fn diagonal_sum(mat: Vec<Vec<i32>>) -> i32 {

    let mut prim = 0;
    let mut secd = 0;
    let mut sum = 0;
    let m = mat.len()-1;
    let remainder = mat.len() % 2;
    let half = (mat.len() /2); 
    let mut  k =0;
    let mut i = 0;
    let mut j   = 0;
    let mut total = 0;
    println!("matSize = {} , remainder = {} {}", remainder, m, half );

    if mat.len() == 1 {
        return mat[0][0];
    }

    if remainder != 0 {
        for i in 0..mat.len(){
            if(i == half){
                prim += mat[i][k];
                println!("odd prim # {}d", prim);

            } else {
                prim += mat[i][k];
                secd += mat[i][m-k];
                println!("odd # prim and secd {} {}", prim, secd);

            }
            k+=1;
        }
    } else {
        for j in 0..mat.len(){
            prim += mat[j][k];
            secd += mat[j][m-k];
            k+=1;
            println!("even # prim and secd {} {}", prim, secd);
        }
    }

    total = prim + secd;
    println!("Total {}", total);
    return total;

}
    
}